
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010a  0080010a  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdb  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a19  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000730  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a8  00000000  00000000  00002cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	2e c2       	rjmp	.+1116   	; 0x482 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f6 c1       	rjmp	.+1004   	; 0x42e <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d2       	rcall	.+1036   	; 0x4d0 <main>
  c4:	54 c2       	rjmp	.+1192   	; 0x56e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Clock_init>:
uint8_t sec, min ;
uint16_t hour, ClockData; // hour 100 ~ 2300

void Clock_init()
{
	milisec = 0;
  c8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <milisec+0x1>
  cc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <milisec>
	sec = 0;
  d0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <sec>
	min = 3;
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <min>
	hour = 7;
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hour+0x1>
  e2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hour>
	
	FND_init();
  e6:	a5 d0       	rcall	.+330    	; 0x232 <FND_init>
	TIM0_OVF_init();
  e8:	f7 d1       	rcall	.+1006   	; 0x4d8 <TIM0_OVF_init>
	TIM2_CTC_init();
  ea:	ff c1       	rjmp	.+1022   	; 0x4ea <TIM2_CTC_init>
  ec:	08 95       	ret

000000ee <Clock_incMilisec>:
  ee:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <milisec>
}


void Clock_incMilisec()
{
	milisec = (milisec + 1) % 1000;
  f2:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <milisec+0x1>
  f6:	4f 5f       	subi	r20, 0xFF	; 255
  f8:	5f 4f       	sbci	r21, 0xFF	; 255
  fa:	9a 01       	movw	r18, r20
  fc:	36 95       	lsr	r19
  fe:	27 95       	ror	r18
 100:	36 95       	lsr	r19
 102:	27 95       	ror	r18
 104:	36 95       	lsr	r19
 106:	27 95       	ror	r18
 108:	a5 ec       	ldi	r26, 0xC5	; 197
 10a:	b0 e2       	ldi	r27, 0x20	; 32
 10c:	0d d2       	rcall	.+1050   	; 0x528 <__umulhisi3>
 10e:	92 95       	swap	r25
 110:	82 95       	swap	r24
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	89 27       	eor	r24, r25
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	89 27       	eor	r24, r25
 11a:	68 ee       	ldi	r22, 0xE8	; 232
 11c:	73 e0       	ldi	r23, 0x03	; 3
 11e:	86 9f       	mul	r24, r22
 120:	90 01       	movw	r18, r0
 122:	87 9f       	mul	r24, r23
 124:	30 0d       	add	r19, r0
 126:	96 9f       	mul	r25, r22
 128:	30 0d       	add	r19, r0
 12a:	11 24       	eor	r1, r1
 12c:	ca 01       	movw	r24, r20
 12e:	82 1b       	sub	r24, r18
 130:	93 0b       	sbc	r25, r19
 132:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <milisec+0x1>
 136:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <milisec>
	if(milisec) return; // milisec 이 1000일때 제외하고 모두 return 1000일 때 sec 증가
 13a:	89 2b       	or	r24, r25
 13c:	c1 f5       	brne	.+112    	; 0x1ae <Clock_incMilisec+0xc0>
	
	sec = (sec + 1) % 60;
 13e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <sec>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	6c e3       	ldi	r22, 0x3C	; 60
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	db d1       	rcall	.+950    	; 0x502 <__divmodhi4>
 14c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <sec>
	if(sec) return;
 150:	81 11       	cpse	r24, r1
 152:	2d c0       	rjmp	.+90     	; 0x1ae <Clock_incMilisec+0xc0>

	min = (min + 1) % 60;
 154:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <min>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	6c e3       	ldi	r22, 0x3C	; 60
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	d0 d1       	rcall	.+928    	; 0x502 <__divmodhi4>
 162:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <min>
	if(min) return;
 166:	81 11       	cpse	r24, r1
 168:	22 c0       	rjmp	.+68     	; 0x1ae <Clock_incMilisec+0xc0>
	
	hour = (hour + 1) % 24;
 16a:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <hour>
 16e:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <hour+0x1>
 172:	4f 5f       	subi	r20, 0xFF	; 255
 174:	5f 4f       	sbci	r21, 0xFF	; 255
 176:	9a 01       	movw	r18, r20
 178:	ab ea       	ldi	r26, 0xAB	; 171
 17a:	ba ea       	ldi	r27, 0xAA	; 170
 17c:	d5 d1       	rcall	.+938    	; 0x528 <__umulhisi3>
 17e:	92 95       	swap	r25
 180:	82 95       	swap	r24
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	89 27       	eor	r24, r25
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	89 27       	eor	r24, r25
 18a:	9c 01       	movw	r18, r24
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	82 0f       	add	r24, r18
 192:	93 1f       	adc	r25, r19
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	9a 01       	movw	r18, r20
 1a2:	28 1b       	sub	r18, r24
 1a4:	39 0b       	sbc	r19, r25
 1a6:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <hour+0x1>
 1aa:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <hour>
 1ae:	08 95       	ret

000001b0 <Clock_execute>:


void Clock_execute()
{
	uint16_t ClockData;
	ClockData = (hour * 1000) + min * 10 + sec / 10;  // 시 : 분 : 분 : 초
 1b0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <hour>
 1b4:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <hour+0x1>
 1b8:	88 ee       	ldi	r24, 0xE8	; 232
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	28 9f       	mul	r18, r24
 1be:	a0 01       	movw	r20, r0
 1c0:	29 9f       	mul	r18, r25
 1c2:	50 0d       	add	r21, r0
 1c4:	38 9f       	mul	r19, r24
 1c6:	50 0d       	add	r21, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <min>
 1ce:	29 2f       	mov	r18, r25
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	c9 01       	movw	r24, r18
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	28 0f       	add	r18, r24
 1e6:	39 1f       	adc	r19, r25
 1e8:	24 0f       	add	r18, r20
 1ea:	35 1f       	adc	r19, r21
 1ec:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <sec>
 1f0:	8d ec       	ldi	r24, 0xCD	; 205
 1f2:	98 9f       	mul	r25, r24
 1f4:	91 2d       	mov	r25, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	96 95       	lsr	r25
 1fa:	96 95       	lsr	r25
 1fc:	96 95       	lsr	r25
	FND_dispNum(ClockData);
 1fe:	a9 01       	movw	r20, r18
 200:	49 0f       	add	r20, r25
 202:	51 1d       	adc	r21, r1
 204:	ca 01       	movw	r24, r20
 206:	1a c0       	rjmp	.+52     	; 0x23c <FND_dispNum>
 208:	08 95       	ret

0000020a <incTick>:
 20a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 20e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 212:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 216:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	a1 1d       	adc	r26, r1
 21e:	b1 1d       	adc	r27, r1
 220:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 224:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 228:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 22c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 230:	08 95       	ret

00000232 <FND_init>:
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	82 b9       	out	0x02, r24	; 2
 236:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 23a:	08 95       	ret

0000023c <FND_dispNum>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	2a 97       	sbiw	r28, 0x0a	; 10
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	ac 01       	movw	r20, r24
 252:	8a e0       	ldi	r24, 0x0A	; 10
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	de 01       	movw	r26, r28
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	01 90       	ld	r0, Z+
 25e:	0d 92       	st	X+, r0
 260:	8a 95       	dec	r24
 262:	e1 f7       	brne	.-8      	; 0x25c <FND_dispNum+0x20>
 264:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <findDigitState.1741>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	83 70       	andi	r24, 0x03	; 3
 26e:	90 78       	andi	r25, 0x80	; 128
 270:	99 23       	and	r25, r25
 272:	24 f4       	brge	.+8      	; 0x27c <FND_dispNum+0x40>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	8c 6f       	ori	r24, 0xFC	; 252
 278:	9f 6f       	ori	r25, 0xFF	; 255
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <findDigitState.1741>
 280:	83 b1       	in	r24, 0x03	; 3
 282:	80 6f       	ori	r24, 0xF0	; 240
 284:	83 b9       	out	0x03, r24	; 3
 286:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <findDigitState.1741>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	09 f4       	brne	.+2      	; 0x290 <FND_dispNum+0x54>
 28e:	3e c0       	rjmp	.+124    	; 0x30c <FND_dispNum+0xd0>
 290:	38 f0       	brcs	.+14     	; 0x2a0 <FND_dispNum+0x64>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	09 f4       	brne	.+2      	; 0x298 <FND_dispNum+0x5c>
 296:	6a c0       	rjmp	.+212    	; 0x36c <FND_dispNum+0x130>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	09 f4       	brne	.+2      	; 0x29e <FND_dispNum+0x62>
 29c:	95 c0       	rjmp	.+298    	; 0x3c8 <FND_dispNum+0x18c>
 29e:	b8 c0       	rjmp	.+368    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 2a0:	9a 01       	movw	r18, r20
 2a2:	36 95       	lsr	r19
 2a4:	27 95       	ror	r18
 2a6:	36 95       	lsr	r19
 2a8:	27 95       	ror	r18
 2aa:	36 95       	lsr	r19
 2ac:	27 95       	ror	r18
 2ae:	a5 ec       	ldi	r26, 0xC5	; 197
 2b0:	b0 e2       	ldi	r27, 0x20	; 32
 2b2:	3a d1       	rcall	.+628    	; 0x528 <__umulhisi3>
 2b4:	ac 01       	movw	r20, r24
 2b6:	52 95       	swap	r21
 2b8:	42 95       	swap	r20
 2ba:	4f 70       	andi	r20, 0x0F	; 15
 2bc:	45 27       	eor	r20, r21
 2be:	5f 70       	andi	r21, 0x0F	; 15
 2c0:	45 27       	eor	r20, r21
 2c2:	9a 01       	movw	r18, r20
 2c4:	ad ec       	ldi	r26, 0xCD	; 205
 2c6:	bc ec       	ldi	r27, 0xCC	; 204
 2c8:	2f d1       	rcall	.+606    	; 0x528 <__umulhisi3>
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	96 95       	lsr	r25
 2d0:	87 95       	ror	r24
 2d2:	96 95       	lsr	r25
 2d4:	87 95       	ror	r24
 2d6:	9c 01       	movw	r18, r24
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	82 0f       	add	r24, r18
 2ea:	93 1f       	adc	r25, r19
 2ec:	9a 01       	movw	r18, r20
 2ee:	28 1b       	sub	r18, r24
 2f0:	39 0b       	sbc	r19, r25
 2f2:	e1 e0       	ldi	r30, 0x01	; 1
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ec 0f       	add	r30, r28
 2f8:	fd 1f       	adc	r31, r29
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	80 81       	ld	r24, Z
 300:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 304:	83 b1       	in	r24, 0x03	; 3
 306:	8f 7e       	andi	r24, 0xEF	; 239
 308:	83 b9       	out	0x03, r24	; 3
 30a:	82 c0       	rjmp	.+260    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 30c:	9a 01       	movw	r18, r20
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	36 95       	lsr	r19
 314:	27 95       	ror	r18
 316:	ab e7       	ldi	r26, 0x7B	; 123
 318:	b4 e1       	ldi	r27, 0x14	; 20
 31a:	06 d1       	rcall	.+524    	; 0x528 <__umulhisi3>
 31c:	ac 01       	movw	r20, r24
 31e:	56 95       	lsr	r21
 320:	47 95       	ror	r20
 322:	9a 01       	movw	r18, r20
 324:	ad ec       	ldi	r26, 0xCD	; 205
 326:	bc ec       	ldi	r27, 0xCC	; 204
 328:	ff d0       	rcall	.+510    	; 0x528 <__umulhisi3>
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	9c 01       	movw	r18, r24
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	9a 01       	movw	r18, r20
 34e:	28 1b       	sub	r18, r24
 350:	39 0b       	sbc	r19, r25
 352:	e1 e0       	ldi	r30, 0x01	; 1
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ec 0f       	add	r30, r28
 358:	fd 1f       	adc	r31, r29
 35a:	e2 0f       	add	r30, r18
 35c:	f3 1f       	adc	r31, r19
 35e:	80 81       	ld	r24, Z
 360:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 364:	83 b1       	in	r24, 0x03	; 3
 366:	8f 7d       	andi	r24, 0xDF	; 223
 368:	83 b9       	out	0x03, r24	; 3
 36a:	52 c0       	rjmp	.+164    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 36c:	9a 01       	movw	r18, r20
 36e:	ad ec       	ldi	r26, 0xCD	; 205
 370:	bc ec       	ldi	r27, 0xCC	; 204
 372:	da d0       	rcall	.+436    	; 0x528 <__umulhisi3>
 374:	ac 01       	movw	r20, r24
 376:	56 95       	lsr	r21
 378:	47 95       	ror	r20
 37a:	56 95       	lsr	r21
 37c:	47 95       	ror	r20
 37e:	56 95       	lsr	r21
 380:	47 95       	ror	r20
 382:	9a 01       	movw	r18, r20
 384:	d1 d0       	rcall	.+418    	; 0x528 <__umulhisi3>
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	9c 01       	movw	r18, r24
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
 3a8:	9a 01       	movw	r18, r20
 3aa:	28 1b       	sub	r18, r24
 3ac:	39 0b       	sbc	r19, r25
 3ae:	e1 e0       	ldi	r30, 0x01	; 1
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	ec 0f       	add	r30, r28
 3b4:	fd 1f       	adc	r31, r29
 3b6:	e2 0f       	add	r30, r18
 3b8:	f3 1f       	adc	r31, r19
 3ba:	80 81       	ld	r24, Z
 3bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c0:	83 b1       	in	r24, 0x03	; 3
 3c2:	8f 7b       	andi	r24, 0xBF	; 191
 3c4:	83 b9       	out	0x03, r24	; 3
 3c6:	24 c0       	rjmp	.+72     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3c8:	9a 01       	movw	r18, r20
 3ca:	ad ec       	ldi	r26, 0xCD	; 205
 3cc:	bc ec       	ldi	r27, 0xCC	; 204
 3ce:	ac d0       	rcall	.+344    	; 0x528 <__umulhisi3>
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	96 95       	lsr	r25
 3da:	87 95       	ror	r24
 3dc:	9c 01       	movw	r18, r24
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	82 0f       	add	r24, r18
 3f0:	93 1f       	adc	r25, r19
 3f2:	9a 01       	movw	r18, r20
 3f4:	28 1b       	sub	r18, r24
 3f6:	39 0b       	sbc	r19, r25
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ec 0f       	add	r30, r28
 3fe:	fd 1f       	adc	r31, r29
 400:	e2 0f       	add	r30, r18
 402:	f3 1f       	adc	r31, r19
 404:	80 81       	ld	r24, Z
 406:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 40a:	83 b1       	in	r24, 0x03	; 3
 40c:	8f 77       	andi	r24, 0x7F	; 127
 40e:	83 b9       	out	0x03, r24	; 3
 410:	2a 96       	adiw	r28, 0x0a	; 10
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <FND_ISR_Process>:
 422:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <fndData>
 426:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <fndData+0x1>
 42a:	08 cf       	rjmp	.-496    	; 0x23c <FND_dispNum>
 42c:	08 95       	ret

0000042e <__vector_16>:




ISR(TIMER0_OVF_vect)  // ISR은 함수 같으면서도 함수 같지 않음  // 매개변수 : TIMER0에 오버플로가 났을 때의 ISR
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	0b b6       	in	r0, 0x3b	; 59
 43a:	0f 92       	push	r0
 43c:	2f 93       	push	r18
 43e:	3f 93       	push	r19
 440:	4f 93       	push	r20
 442:	5f 93       	push	r21
 444:	6f 93       	push	r22
 446:	7f 93       	push	r23
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	af 93       	push	r26
 44e:	bf 93       	push	r27
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
	FND_ISR_Process(); //ISR에서 동작하는 함수
 454:	e6 df       	rcall	.-52     	; 0x422 <FND_ISR_Process>
	TCNT0 = 131; // 130인지 131인지? : 130에서 125카운트해도 255 -> 오버플로 X / 131로 해야지 오버플로가 발생
 456:	83 e8       	ldi	r24, 0x83	; 131
	incTick();
 458:	82 bf       	out	0x32, r24	; 50
 45a:	d7 de       	rcall	.-594    	; 0x20a <incTick>
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0b be       	out	0x3b, r0	; 59
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_9>:


ISR(TIMER2_COMP_vect) //OCR 설정 값과 같아졌을 때 interrupt 발생
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	0b b6       	in	r0, 0x3b	; 59
 48e:	0f 92       	push	r0
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	Clock_incMilisec();
 4a8:	22 de       	rcall	.-956    	; 0xee <Clock_incMilisec>
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	7f 91       	pop	r23
 4b8:	6f 91       	pop	r22
 4ba:	5f 91       	pop	r21
 4bc:	4f 91       	pop	r20
 4be:	3f 91       	pop	r19
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0b be       	out	0x3b, r0	; 59
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <main>:



int main(void)
{
	Clock_init();
 4d0:	fb dd       	rcall	.-1034   	; 0xc8 <Clock_init>
	sei(); // ??
	
	
	while (1)
	{
		Clock_execute();
 4d2:	78 94       	sei
 4d4:	6d de       	rcall	.-806    	; 0x1b0 <Clock_execute>
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <main+0x4>

000004d8 <TIM0_OVF_init>:
 4d8:	83 b7       	in	r24, 0x33	; 51
 4da:	85 60       	ori	r24, 0x05	; 5
 4dc:	83 bf       	out	0x33, r24	; 51
 4de:	87 b7       	in	r24, 0x37	; 55
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	87 bf       	out	0x37, r24	; 55
 4e4:	83 e8       	ldi	r24, 0x83	; 131
 4e6:	82 bf       	out	0x32, r24	; 50
 4e8:	08 95       	ret

000004ea <TIM2_CTC_init>:
 4ea:	85 b5       	in	r24, 0x25	; 37
 4ec:	83 60       	ori	r24, 0x03	; 3
 4ee:	85 bd       	out	0x25, r24	; 37
 4f0:	85 b5       	in	r24, 0x25	; 37
 4f2:	88 60       	ori	r24, 0x08	; 8
 4f4:	85 bd       	out	0x25, r24	; 37
 4f6:	87 b7       	in	r24, 0x37	; 55
 4f8:	80 68       	ori	r24, 0x80	; 128
 4fa:	87 bf       	out	0x37, r24	; 55
 4fc:	89 ef       	ldi	r24, 0xF9	; 249
 4fe:	83 bd       	out	0x23, r24	; 35
 500:	08 95       	ret

00000502 <__divmodhi4>:
 502:	97 fb       	bst	r25, 7
 504:	07 2e       	mov	r0, r23
 506:	16 f4       	brtc	.+4      	; 0x50c <__divmodhi4+0xa>
 508:	00 94       	com	r0
 50a:	06 d0       	rcall	.+12     	; 0x518 <__divmodhi4_neg1>
 50c:	77 fd       	sbrc	r23, 7
 50e:	08 d0       	rcall	.+16     	; 0x520 <__divmodhi4_neg2>
 510:	1a d0       	rcall	.+52     	; 0x546 <__udivmodhi4>
 512:	07 fc       	sbrc	r0, 7
 514:	05 d0       	rcall	.+10     	; 0x520 <__divmodhi4_neg2>
 516:	3e f4       	brtc	.+14     	; 0x526 <__divmodhi4_exit>

00000518 <__divmodhi4_neg1>:
 518:	90 95       	com	r25
 51a:	81 95       	neg	r24
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__divmodhi4_neg2>:
 520:	70 95       	com	r23
 522:	61 95       	neg	r22
 524:	7f 4f       	sbci	r23, 0xFF	; 255

00000526 <__divmodhi4_exit>:
 526:	08 95       	ret

00000528 <__umulhisi3>:
 528:	a2 9f       	mul	r26, r18
 52a:	b0 01       	movw	r22, r0
 52c:	b3 9f       	mul	r27, r19
 52e:	c0 01       	movw	r24, r0
 530:	a3 9f       	mul	r26, r19
 532:	70 0d       	add	r23, r0
 534:	81 1d       	adc	r24, r1
 536:	11 24       	eor	r1, r1
 538:	91 1d       	adc	r25, r1
 53a:	b2 9f       	mul	r27, r18
 53c:	70 0d       	add	r23, r0
 53e:	81 1d       	adc	r24, r1
 540:	11 24       	eor	r1, r1
 542:	91 1d       	adc	r25, r1
 544:	08 95       	ret

00000546 <__udivmodhi4>:
 546:	aa 1b       	sub	r26, r26
 548:	bb 1b       	sub	r27, r27
 54a:	51 e1       	ldi	r21, 0x11	; 17
 54c:	07 c0       	rjmp	.+14     	; 0x55c <__udivmodhi4_ep>

0000054e <__udivmodhi4_loop>:
 54e:	aa 1f       	adc	r26, r26
 550:	bb 1f       	adc	r27, r27
 552:	a6 17       	cp	r26, r22
 554:	b7 07       	cpc	r27, r23
 556:	10 f0       	brcs	.+4      	; 0x55c <__udivmodhi4_ep>
 558:	a6 1b       	sub	r26, r22
 55a:	b7 0b       	sbc	r27, r23

0000055c <__udivmodhi4_ep>:
 55c:	88 1f       	adc	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	5a 95       	dec	r21
 562:	a9 f7       	brne	.-22     	; 0x54e <__udivmodhi4_loop>
 564:	80 95       	com	r24
 566:	90 95       	com	r25
 568:	bc 01       	movw	r22, r24
 56a:	cd 01       	movw	r24, r26
 56c:	08 95       	ret

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>


4. standLightDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013aa  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb4  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ad  00000000  00000000  00002466  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063a  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000399  00000000  00000000  0000351e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000038b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 30       	cpi	r26, 0x0D	; 13
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	f0 d0       	rcall	.+480    	; 0x28a <main>
  aa:	25 c1       	rjmp	.+586    	; 0x2f6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <StandLight_init>:



void StandLight_init()
{
	Led_init(&LED_DDR);
  ae:	81 e3       	ldi	r24, 0x31	; 49
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	e3 d0       	rcall	.+454    	; 0x27a <Led_init>
	
	Button_init(&btnMode, &BUTTON_DDR, &BUTTON_PIN, 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	49 e3       	ldi	r20, 0x39	; 57
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	6a e3       	ldi	r22, 0x3A	; 58
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	a4 d0       	rcall	.+328    	; 0x20c <Button_init>
	Button_init(&btnOff, &BUTTON_DDR, &BUTTON_PIN, 1);
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	49 e3       	ldi	r20, 0x39	; 57
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	6a e3       	ldi	r22, 0x3A	; 58
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	9c d0       	rcall	.+312    	; 0x20c <Button_init>
	
	standLightState=LED_OFF;
  d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	08 95       	ret

000000da <StandLight_eventCheck>:
	
}

void StandLight_eventCheck() // 버튼이 눌리는 이벤트에 맞춰 상태를 바꿔주는 함수
{
	switch(standLightState)
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	71 f1       	breq	.+92     	; 0x13e <StandLight_eventCheck+0x64>
  e2:	28 f4       	brcc	.+10     	; 0xee <StandLight_eventCheck+0x14>
  e4:	88 23       	and	r24, r24
  e6:	49 f0       	breq	.+18     	; 0xfa <StandLight_eventCheck+0x20>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	c9 f0       	breq	.+50     	; 0x11e <StandLight_eventCheck+0x44>
  ec:	08 95       	ret
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	b9 f1       	breq	.+110    	; 0x160 <StandLight_eventCheck+0x86>
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	09 f4       	brne	.+2      	; 0xf8 <StandLight_eventCheck+0x1e>
  f6:	45 c0       	rjmp	.+138    	; 0x182 <StandLight_eventCheck+0xa8>
  f8:	08 95       	ret
	{
		case LED_OFF:
		if(Button_GetState(&btnMode) == ACT_RELEASED)
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	93 d0       	rcall	.+294    	; 0x226 <Button_GetState>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	21 f4       	brne	.+8      	; 0x10c <StandLight_eventCheck+0x32>
		{
			standLightState = MODE1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	08 95       	ret
		}
		else if(Button_GetState(&btnOff) == ACT_RELEASED)
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	8a d0       	rcall	.+276    	; 0x226 <Button_GetState>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	09 f0       	breq	.+2      	; 0x118 <StandLight_eventCheck+0x3e>
 116:	44 c0       	rjmp	.+136    	; 0x1a0 <StandLight_eventCheck+0xc6>
		{
			standLightState = LED_OFF;
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	08 95       	ret
		}
		break;
		
		
		case MODE1:
		if(Button_GetState(&btnMode) == ACT_RELEASED)
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	81 d0       	rcall	.+258    	; 0x226 <Button_GetState>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	19 f4       	brne	.+6      	; 0x12e <StandLight_eventCheck+0x54>
		{
			standLightState = MODE2;
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(Button_GetState(&btnOff) == ACT_RELEASED)
 12c:	08 95       	ret
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	79 d0       	rcall	.+242    	; 0x226 <Button_GetState>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	a1 f5       	brne	.+104    	; 0x1a0 <StandLight_eventCheck+0xc6>
		{
			standLightState = LED_OFF;
 138:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
		
		
		case MODE2:
		if(Button_GetState(&btnMode)==ACT_RELEASED)
 13c:	08 95       	ret
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	71 d0       	rcall	.+226    	; 0x226 <Button_GetState>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	21 f4       	brne	.+8      	; 0x150 <StandLight_eventCheck+0x76>
		{
			standLightState=MODE3;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(Button_GetState(&btnOff)==ACT_RELEASED)
 14e:	08 95       	ret
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	68 d0       	rcall	.+208    	; 0x226 <Button_GetState>
 156:	82 30       	cpi	r24, 0x02	; 2
		{
			standLightState=LED_OFF;
 158:	19 f5       	brne	.+70     	; 0x1a0 <StandLight_eventCheck+0xc6>
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
		
		
		case MODE3:
		if(Button_GetState(&btnMode)==ACT_RELEASED)
 15e:	08 95       	ret
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	60 d0       	rcall	.+192    	; 0x226 <Button_GetState>
 166:	82 30       	cpi	r24, 0x02	; 2
		{
			standLightState=MODE4;
 168:	21 f4       	brne	.+8      	; 0x172 <StandLight_eventCheck+0x98>
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(Button_GetState(&btnOff)==ACT_RELEASED)
 170:	08 95       	ret
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	57 d0       	rcall	.+174    	; 0x226 <Button_GetState>
 178:	82 30       	cpi	r24, 0x02	; 2
		{
			standLightState=LED_OFF;
 17a:	91 f4       	brne	.+36     	; 0x1a0 <StandLight_eventCheck+0xc6>
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
		
		
		case MODE4:
		if(Button_GetState(&btnMode)==ACT_RELEASED)
 180:	08 95       	ret
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	4f d0       	rcall	.+158    	; 0x226 <Button_GetState>
 188:	82 30       	cpi	r24, 0x02	; 2
		{
			standLightState=LED_OFF;
 18a:	19 f4       	brne	.+6      	; 0x192 <StandLight_eventCheck+0xb8>
 18c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(Button_GetState(&btnOff)==ACT_RELEASED)
 190:	08 95       	ret
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	47 d0       	rcall	.+142    	; 0x226 <Button_GetState>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	11 f4       	brne	.+4      	; 0x1a0 <StandLight_eventCheck+0xc6>
		{
			standLightState=LED_OFF;
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	08 95       	ret

000001a2 <StandLight_allOff>:
}


void StandLight_allOff()
{
	Led_allOff(&LED_PORT,0x00);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	82 e3       	ldi	r24, 0x32	; 50
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	6d c0       	rjmp	.+218    	; 0x284 <Led_allOff>
 1aa:	08 95       	ret

000001ac <StandLight_MODE1>:
}


void StandLight_MODE1()
{
	Led_writeData(&LED_PORT,0b00000011);
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	66 c0       	rjmp	.+204    	; 0x280 <Led_writeData>
 1b4:	08 95       	ret

000001b6 <StandLight_MODE2>:
}

void StandLight_MODE2()
{
	Led_writeData(&LED_PORT,0b00001111);
 1b6:	6f e0       	ldi	r22, 0x0F	; 15
 1b8:	82 e3       	ldi	r24, 0x32	; 50
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	61 c0       	rjmp	.+194    	; 0x280 <Led_writeData>
 1be:	08 95       	ret

000001c0 <StandLight_MODE3>:
}

void StandLight_MODE3()
{
	Led_writeData(&LED_PORT,0b00111111);
 1c0:	6f e3       	ldi	r22, 0x3F	; 63
 1c2:	82 e3       	ldi	r24, 0x32	; 50
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	5c c0       	rjmp	.+184    	; 0x280 <Led_writeData>
 1c8:	08 95       	ret

000001ca <StandLight_MODE4>:
	
}

void StandLight_MODE4()
{
	Led_writeData(&LED_PORT,0b11111111);
 1ca:	6f ef       	ldi	r22, 0xFF	; 255
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	57 c0       	rjmp	.+174    	; 0x280 <Led_writeData>
 1d2:	08 95       	ret

000001d4 <StandLight_execute>:
		
	}
}
void StandLight_execute() // 상태에 맞는 함수 호출
{
	switch(standLightState)
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	79 f0       	breq	.+30     	; 0x1fa <StandLight_execute+0x26>
 1dc:	28 f4       	brcc	.+10     	; 0x1e8 <StandLight_execute+0x14>
 1de:	88 23       	and	r24, r24
 1e0:	41 f0       	breq	.+16     	; 0x1f2 <StandLight_execute+0x1e>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	41 f0       	breq	.+16     	; 0x1f6 <StandLight_execute+0x22>
 1e6:	08 95       	ret
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	49 f0       	breq	.+18     	; 0x1fe <StandLight_execute+0x2a>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	49 f0       	breq	.+18     	; 0x202 <StandLight_execute+0x2e>
 1f0:	08 95       	ret
	{
		case LED_OFF:
		StandLight_allOff();
 1f2:	d7 cf       	rjmp	.-82     	; 0x1a2 <StandLight_allOff>
		break;
		
		
		case MODE1:
		StandLight_MODE1();
 1f4:	08 95       	ret
		break;
 1f6:	da cf       	rjmp	.-76     	; 0x1ac <StandLight_MODE1>
		
		
		case MODE2:
		StandLight_MODE2();
 1f8:	08 95       	ret
		break;
		
		
		case MODE3:
		StandLight_MODE3();
 1fa:	dd cf       	rjmp	.-70     	; 0x1b6 <StandLight_MODE2>
 1fc:	08 95       	ret
		break;
 1fe:	e0 cf       	rjmp	.-64     	; 0x1c0 <StandLight_MODE3>
		
		
		case MODE4:
		StandLight_MODE4();
 200:	08 95       	ret
 202:	e3 cf       	rjmp	.-58     	; 0x1ca <StandLight_MODE4>
 204:	08 95       	ret

00000206 <StandLight_run>:
	standLightState=LED_OFF;
}

void StandLight_run()
{
	StandLight_eventCheck();
 206:	69 df       	rcall	.-302    	; 0xda <StandLight_eventCheck>
	
	StandLight_execute();
 208:	e5 cf       	rjmp	.-54     	; 0x1d4 <StandLight_execute>
 20a:	08 95       	ret

0000020c <Button_init>:
 20c:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 20e:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		
 210:	71 83       	std	Z+1, r23	; 0x01
 212:	60 83       	st	Z, r22
	btn ->PIN = pin;
 214:	53 83       	std	Z+3, r21	; 0x03
 216:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 218:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 21a:	31 e0       	ldi	r19, 0x01	; 1
 21c:	35 83       	std	Z+5, r19	; 0x05
	Gpio_initPin(btn->DDR,btn->pinNum,INPUT);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	62 2f       	mov	r22, r18
 222:	3f c0       	rjmp	.+126    	; 0x2a2 <Gpio_initPin>
 224:	08 95       	ret

00000226 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) 
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24
	uint8_t curState = Gpio_readPin(btn->PIN,btn->pinNum); //pinNum 버튼 눌리면 0(PUSHED)
 22c:	6c 81       	ldd	r22, Y+4	; 0x04
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	9b 81       	ldd	r25, Y+3	; 0x03
 232:	57 d0       	rcall	.+174    	; 0x2e2 <Gpio_readPin>
 234:	98 2f       	mov	r25, r24
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED)) // 안 눌 -> 눌
 236:	81 11       	cpse	r24, r1
 238:	0b c0       	rjmp	.+22     	; 0x250 <Button_GetState+0x2a>
 23a:	8d 81       	ldd	r24, Y+5	; 0x05
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	41 f4       	brne	.+16     	; 0x250 <Button_GetState+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	e3 ec       	ldi	r30, 0xC3	; 195
 242:	f9 e0       	ldi	r31, 0x09	; 9
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <Button_GetState+0x1e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <Button_GetState+0x24>
 24a:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 24c:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED;  //눌린 상태
 24e:	12 c0       	rjmp	.+36     	; 0x274 <Button_GetState+0x4e>
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED)) // 눌 -> 안 눌
 250:	99 23       	and	r25, r25
 252:	69 f0       	breq	.+26     	; 0x26e <Button_GetState+0x48>
 254:	8d 81       	ldd	r24, Y+5	; 0x05
 256:	81 11       	cpse	r24, r1
 258:	0c c0       	rjmp	.+24     	; 0x272 <Button_GetState+0x4c>
 25a:	83 ec       	ldi	r24, 0xC3	; 195
 25c:	99 e0       	ldi	r25, 0x09	; 9
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <Button_GetState+0x38>
 262:	00 c0       	rjmp	.+0      	; 0x264 <Button_GetState+0x3e>
 264:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED; // 눌렀다 뗀 상태
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	03 c0       	rjmp	.+6      	; 0x274 <Button_GetState+0x4e>
		
	}
	return ACT_NONE; // 아무 동작도 없는 상태
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	01 c0       	rjmp	.+2      	; 0x274 <Button_GetState+0x4e>
 272:	80 e0       	ldi	r24, 0x00	; 0
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <Led_init>:
﻿#include "LED.h"

void Led_init(volatile uint8_t *DDR)
{
	Gpio_initPort(DDR,OUTPUT);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	09 c0       	rjmp	.+18     	; 0x290 <Gpio_initPort>
 27e:	08 95       	ret

00000280 <Led_writeData>:
}

void Led_writeData(volatile uint8_t *PORT,uint8_t data)
{
	Gpio_writePort(PORT,data);
 280:	2d c0       	rjmp	.+90     	; 0x2dc <Gpio_writePort>
 282:	08 95       	ret

00000284 <Led_allOff>:
}

void Led_allOff(volatile uint8_t *PORT,uint8_t data)
{
	Gpio_writePort(PORT,0x00);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	2a c0       	rjmp	.+84     	; 0x2dc <Gpio_writePort>
 288:	08 95       	ret

0000028a <main>:
#include "ap/StandLight/StandLight.h"


int main(void)
{
	StandLight_init();
 28a:	11 df       	rcall	.-478    	; 0xae <StandLight_init>
	
	
	
	while (1)
	{
		StandLight_run();
 28c:	bc df       	rcall	.-136    	; 0x206 <StandLight_run>
 28e:	fe cf       	rjmp	.-4      	; 0x28c <main+0x2>

00000290 <Gpio_initPort>:
 290:	61 30       	cpi	r22, 0x01	; 1

//Input-port
uint8_t Gpio_readPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 292:	21 f4       	brne	.+8      	; 0x29c <Gpio_initPort+0xc>
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
 29a:	08 95       	ret
 29c:	fc 01       	movw	r30, r24
 29e:	10 82       	st	Z, r1
 2a0:	08 95       	ret

000002a2 <Gpio_initPin>:
 2a2:	fc 01       	movw	r30, r24
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	59 f4       	brne	.+22     	; 0x2be <Gpio_initPin+0x1c>
 2a8:	20 81       	ld	r18, Z
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <Gpio_initPin+0x12>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <Gpio_initPin+0xe>
 2b8:	82 2b       	or	r24, r18
 2ba:	80 83       	st	Z, r24
 2bc:	08 95       	ret
 2be:	80 81       	ld	r24, Z
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <Gpio_initPin+0x28>
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <Gpio_initPin+0x24>
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	23 2b       	or	r18, r19
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <Gpio_initPin+0x34>
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	98 23       	and	r25, r24
 2d8:	90 83       	st	Z, r25
 2da:	08 95       	ret

000002dc <Gpio_writePort>:
 2dc:	fc 01       	movw	r30, r24
 2de:	60 83       	st	Z, r22
 2e0:	08 95       	ret

000002e2 <Gpio_readPin>:

//Input-pin
uint8_t Gpio_readPin(volatile uint8_t *PIN,uint8_t pinNum)
{
	return((*PIN&(1<<pinNum)) != 0);  // *PIN&(1<<pinNum)값은 0아니면1  // 0 != 0 // 거짓 
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <Gpio_readPin+0xc>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <Gpio_readPin+0x8>
									 // != 을 쓴이유 : pinNum 제외한 버튼을 눌렀을 때 반응 안함

	
 2f2:	81 70       	andi	r24, 0x01	; 1
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>

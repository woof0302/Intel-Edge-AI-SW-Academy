
FND_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000053a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010a  0080010a  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001260  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c96  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093e  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052d  00000000  00000000  000037e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c1       	rjmp	.+826    	; 0x37c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	86 d1       	rcall	.+780    	; 0x3d0 <main>
  c4:	38 c2       	rjmp	.+1136   	; 0x536 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <incTick>:
	timeTick++;
}

void clearTick()
{
	timeTick = 0;
  c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  cc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  d0:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
  d4:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  e2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  e6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
  ea:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
  ee:	08 95       	ret

000000f0 <getTick>:
}

uint32_t getTick()
{
	return timeTick;
  f0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
  f4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
  f8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
  fc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 100:	08 95       	ret

00000102 <Button_init>:
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 102:	fc 01       	movw	r30, r24
 104:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
 106:	71 83       	std	Z+1, r23	; 0x01
 108:	60 83       	st	Z, r22
	btn ->PIN = pin;
 10a:	53 83       	std	Z+3, r21	; 0x03
 10c:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 10e:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 110:	31 e0       	ldi	r19, 0x01	; 1
 112:	35 83       	std	Z+5, r19	; 0x05
	Gpio_initPin(btn->DDR,btn->pinNum,0);
 114:	62 2f       	mov	r22, r18
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	cd c1       	rjmp	.+922    	; 0x4b8 <Gpio_initPin>
 11e:	08 95       	ret

00000120 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
	uint8_t curState = Gpio_readPin(btn->PIN,btn->pinNum); //pinNum 버튼 눌리면 0(PUSHED)
 126:	6c 81       	ldd	r22, Y+4	; 0x04
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	9b 81       	ldd	r25, Y+3	; 0x03
 12e:	e1 d1       	rcall	.+962    	; 0x4f2 <Gpio_readPin>
 130:	98 2f       	mov	r25, r24
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED)) // 안 눌 -> 눌
 132:	81 11       	cpse	r24, r1
 134:	0b c0       	rjmp	.+22     	; 0x14c <Button_GetState+0x2c>
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	41 f4       	brne	.+16     	; 0x14c <Button_GetState+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	e3 ec       	ldi	r30, 0xC3	; 195
 13e:	f9 e0       	ldi	r31, 0x09	; 9
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <Button_GetState+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Button_GetState+0x26>
 146:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 148:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED;  //눌린 상태
 14a:	12 c0       	rjmp	.+36     	; 0x170 <Button_GetState+0x50>
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED)) // 눌 -> 안 눌
 14c:	99 23       	and	r25, r25
 14e:	69 f0       	breq	.+26     	; 0x16a <Button_GetState+0x4a>
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	81 11       	cpse	r24, r1
 154:	0c c0       	rjmp	.+24     	; 0x16e <Button_GetState+0x4e>
 156:	83 ec       	ldi	r24, 0xC3	; 195
 158:	99 e0       	ldi	r25, 0x09	; 9
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <Button_GetState+0x3a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <Button_GetState+0x40>
 160:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED; // 눌렀다 뗀 상태
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	03 c0       	rjmp	.+6      	; 0x170 <Button_GetState+0x50>
		
	}
	return ACT_NONE; // 아무 동작도 없는 상태
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <Button_GetState+0x50>
 16e:	80 e0       	ldi	r24, 0x00	; 0
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <FND_init>:

uint16_t fndData = 0;

void FND_init()
{
	FND_DIGIT_DDR = 0xff;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	82 b9       	out	0x02, r24	; 2
	FND_NUM_DDR = 0xff;
 17a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 17e:	08 95       	ret

00000180 <FND_dispNum>:
	
}

void FND_dispNum(uint16_t fndNum) // fndNum 값을 fnd에 출력
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	2a 97       	sbiw	r28, 0x0a	; 10
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	ac 01       	movw	r20, r24
	uint8_t fndFont[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	de 01       	movw	r26, r28
 19e:	11 96       	adiw	r26, 0x01	; 1
 1a0:	01 90       	ld	r0, Z+
 1a2:	0d 92       	st	X+, r0
 1a4:	8a 95       	dec	r24
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <FND_dispNum+0x20>
	
	static uint8_t findDigitState = 0;
	
	findDigitState = (findDigitState + 1) % 4;
 1a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <findDigitState.1741>
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	83 70       	andi	r24, 0x03	; 3
 1b2:	90 78       	andi	r25, 0x80	; 128
 1b4:	99 23       	and	r25, r25
 1b6:	24 f4       	brge	.+8      	; 0x1c0 <FND_dispNum+0x40>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	8c 6f       	ori	r24, 0xFC	; 252
 1bc:	9f 6f       	ori	r25, 0xFF	; 255
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <findDigitState.1741>
	
	PORTE |= (1<<FND_DIGIT_4) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_1); // 1을 내보낸다 == 불을 끌거다
 1c4:	83 b1       	in	r24, 0x03	; 3
 1c6:	80 6f       	ori	r24, 0xF0	; 240
 1c8:	83 b9       	out	0x03, r24	; 3
	
	switch(findDigitState)
 1ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <findDigitState.1741>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <FND_dispNum+0x54>
 1d2:	3e c0       	rjmp	.+124    	; 0x250 <FND_dispNum+0xd0>
 1d4:	38 f0       	brcs	.+14     	; 0x1e4 <FND_dispNum+0x64>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	09 f4       	brne	.+2      	; 0x1dc <FND_dispNum+0x5c>
 1da:	6a c0       	rjmp	.+212    	; 0x2b0 <FND_dispNum+0x130>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	09 f4       	brne	.+2      	; 0x1e2 <FND_dispNum+0x62>
 1e0:	95 c0       	rjmp	.+298    	; 0x30c <FND_dispNum+0x18c>
 1e2:	b8 c0       	rjmp	.+368    	; 0x354 <FND_dispNum+0x1d4>
	{
		case 0 :
		//PORTE |= (1<<7) | (1<<6) | (1<<5) | (1<<4); // 1을 내보낸다 == 불을 끌거다
		FND_NUM_PORT = fndFont[fndNum/1000%10];	// fndNum의 천의 자리 추출
 1e4:	9a 01       	movw	r18, r20
 1e6:	36 95       	lsr	r19
 1e8:	27 95       	ror	r18
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	a5 ec       	ldi	r26, 0xC5	; 197
 1f4:	b0 e2       	ldi	r27, 0x20	; 32
 1f6:	90 d1       	rcall	.+800    	; 0x518 <__umulhisi3>
 1f8:	ac 01       	movw	r20, r24
 1fa:	52 95       	swap	r21
 1fc:	42 95       	swap	r20
 1fe:	4f 70       	andi	r20, 0x0F	; 15
 200:	45 27       	eor	r20, r21
 202:	5f 70       	andi	r21, 0x0F	; 15
 204:	45 27       	eor	r20, r21
 206:	9a 01       	movw	r18, r20
 208:	ad ec       	ldi	r26, 0xCD	; 205
 20a:	bc ec       	ldi	r27, 0xCC	; 204
 20c:	85 d1       	rcall	.+778    	; 0x518 <__umulhisi3>
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	9c 01       	movw	r18, r24
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	82 0f       	add	r24, r18
 22e:	93 1f       	adc	r25, r19
 230:	9a 01       	movw	r18, r20
 232:	28 1b       	sub	r18, r24
 234:	39 0b       	sbc	r19, r25
 236:	e1 e0       	ldi	r30, 0x01	; 1
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ec 0f       	add	r30, r28
 23c:	fd 1f       	adc	r31, r29
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	80 81       	ld	r24, Z
 244:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_1);  // 한 자리만 지정해서 출력
 248:	83 b1       	in	r24, 0x03	; 3
 24a:	8f 7e       	andi	r24, 0xEF	; 239
 24c:	83 b9       	out	0x03, r24	; 3
		break;
 24e:	82 c0       	rjmp	.+260    	; 0x354 <FND_dispNum+0x1d4>
		
		case 1 :
		//PORTE |= (1<<7) | (1<<6) | (1<<5) | (1<<4); // 1을 내보낸다 == 불을 끌거다
		FND_NUM_PORT=fndFont[fndNum/100%10];  // fndNum의 천의 자리 추출
 250:	9a 01       	movw	r18, r20
 252:	36 95       	lsr	r19
 254:	27 95       	ror	r18
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	ab e7       	ldi	r26, 0x7B	; 123
 25c:	b4 e1       	ldi	r27, 0x14	; 20
 25e:	5c d1       	rcall	.+696    	; 0x518 <__umulhisi3>
 260:	ac 01       	movw	r20, r24
 262:	56 95       	lsr	r21
 264:	47 95       	ror	r20
 266:	9a 01       	movw	r18, r20
 268:	ad ec       	ldi	r26, 0xCD	; 205
 26a:	bc ec       	ldi	r27, 0xCC	; 204
 26c:	55 d1       	rcall	.+682    	; 0x518 <__umulhisi3>
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	9c 01       	movw	r18, r24
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	82 0f       	add	r24, r18
 28e:	93 1f       	adc	r25, r19
 290:	9a 01       	movw	r18, r20
 292:	28 1b       	sub	r18, r24
 294:	39 0b       	sbc	r19, r25
 296:	e1 e0       	ldi	r30, 0x01	; 1
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ec 0f       	add	r30, r28
 29c:	fd 1f       	adc	r31, r29
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	80 81       	ld	r24, Z
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_2);
 2a8:	83 b1       	in	r24, 0x03	; 3
 2aa:	8f 7d       	andi	r24, 0xDF	; 223
 2ac:	83 b9       	out	0x03, r24	; 3
		break;
		
		case 2 :
		//PORTE |= (1<<7) | (1<<6) | (1<<5) | (1<<4); // 1을 내보낸다 == 불을 끌거다
		FND_NUM_PORT=fndFont[fndNum/10%10];  // fndNum의 천의 자리 추출
 2ae:	52 c0       	rjmp	.+164    	; 0x354 <FND_dispNum+0x1d4>
 2b0:	9a 01       	movw	r18, r20
 2b2:	ad ec       	ldi	r26, 0xCD	; 205
 2b4:	bc ec       	ldi	r27, 0xCC	; 204
 2b6:	30 d1       	rcall	.+608    	; 0x518 <__umulhisi3>
 2b8:	ac 01       	movw	r20, r24
 2ba:	56 95       	lsr	r21
 2bc:	47 95       	ror	r20
 2be:	56 95       	lsr	r21
 2c0:	47 95       	ror	r20
 2c2:	56 95       	lsr	r21
 2c4:	47 95       	ror	r20
 2c6:	9a 01       	movw	r18, r20
 2c8:	27 d1       	rcall	.+590    	; 0x518 <__umulhisi3>
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	96 95       	lsr	r25
 2d0:	87 95       	ror	r24
 2d2:	96 95       	lsr	r25
 2d4:	87 95       	ror	r24
 2d6:	9c 01       	movw	r18, r24
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	82 0f       	add	r24, r18
 2ea:	93 1f       	adc	r25, r19
 2ec:	9a 01       	movw	r18, r20
 2ee:	28 1b       	sub	r18, r24
 2f0:	39 0b       	sbc	r19, r25
 2f2:	e1 e0       	ldi	r30, 0x01	; 1
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ec 0f       	add	r30, r28
 2f8:	fd 1f       	adc	r31, r29
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	80 81       	ld	r24, Z
 300:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_3);
 304:	83 b1       	in	r24, 0x03	; 3
 306:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 308:	83 b9       	out	0x03, r24	; 3
		
		case 3 :
		//PORTE |= (1<<7) | (1<<6) | (1<<5) | (1<<4); // 1을 내보낸다 == 불을 끌거다
		FND_NUM_PORT=fndFont[fndNum/1%10];  // fndNum의 천의 자리 추출
 30a:	24 c0       	rjmp	.+72     	; 0x354 <FND_dispNum+0x1d4>
 30c:	9a 01       	movw	r18, r20
 30e:	ad ec       	ldi	r26, 0xCD	; 205
 310:	bc ec       	ldi	r27, 0xCC	; 204
 312:	02 d1       	rcall	.+516    	; 0x518 <__umulhisi3>
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	9c 01       	movw	r18, r24
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	82 0f       	add	r24, r18
 334:	93 1f       	adc	r25, r19
 336:	9a 01       	movw	r18, r20
 338:	28 1b       	sub	r18, r24
 33a:	39 0b       	sbc	r19, r25
 33c:	e1 e0       	ldi	r30, 0x01	; 1
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ec 0f       	add	r30, r28
 342:	fd 1f       	adc	r31, r29
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	80 81       	ld	r24, Z
 34a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_4);
 34e:	83 b1       	in	r24, 0x03	; 3
 350:	8f 77       	andi	r24, 0x7F	; 127
 352:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 354:	2a 96       	adiw	r28, 0x0a	; 10
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <FND_setfndData>:



void FND_setfndData(uint16_t data)
{
	fndData = data;
 366:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <fndData+0x1>
 36a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <fndData>
 36e:	08 95       	ret

00000370 <FND_ISR_Process>:
}


void FND_ISR_Process()
{
	FND_dispNum(fndData);
 370:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <fndData>
 374:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <fndData+0x1>
 378:	03 cf       	rjmp	.-506    	; 0x180 <FND_dispNum>
 37a:	08 95       	ret

0000037c <__vector_16>:
#include "common/TimeTick/TimeTick.h"

enum{STOP, RUN, RESET};

ISR(TIMER0_OVF_vect)  // ISR은 함수 같으면서도 함수 같지 않음  // 매개변수 : TIMER0에 오버플로가 났을 때의 ISR
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	0b b6       	in	r0, 0x3b	; 59
 388:	0f 92       	push	r0
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	4f 93       	push	r20
 390:	5f 93       	push	r21
 392:	6f 93       	push	r22
 394:	7f 93       	push	r23
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	FND_ISR_Process(); //ISR에서 동작하는 함수
 3a2:	e6 df       	rcall	.-52     	; 0x370 <FND_ISR_Process>
	TCNT0 = 130;
 3a4:	82 e8       	ldi	r24, 0x82	; 130
	incTick();
 3a6:	82 bf       	out	0x32, r24	; 50
 3a8:	8f de       	rcall	.-738    	; 0xc8 <incTick>
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0b be       	out	0x3b, r0	; 59
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <main>:


int main(void)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	2c 97       	sbiw	r28, 0x0c	; 12
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
	FND_init();
 3e4:	c8 de       	rcall	.-624    	; 0x176 <FND_init>
	TIM0_OVF_init();
 3e6:	8f d0       	rcall	.+286    	; 0x506 <TIM0_OVF_init>
 3e8:	78 94       	sei
	//uint32_t timeTick=0;
	uint32_t prevTime=0;
	
	
	
	sei();
 3ea:	20 e0       	ldi	r18, 0x00	; 0
	
	uint8_t upCounterState=STOP;
	
	button_t btnRunStop, btnReset;
	
	Button_init(&btnRunStop,&DDRA,&PINA,0);
 3ec:	49 e3       	ldi	r20, 0x39	; 57
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	6a e3       	ldi	r22, 0x3A	; 58
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	84 de       	rcall	.-760    	; 0x102 <Button_init>
 3fa:	21 e0       	ldi	r18, 0x01	; 1
	Button_init(&btnReset,&DDRA,&PINA,1);
 3fc:	49 e3       	ldi	r20, 0x39	; 57
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	6a e3       	ldi	r22, 0x3A	; 58
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	ce 01       	movw	r24, r28
 406:	07 96       	adiw	r24, 0x07	; 7
 408:	7c de       	rcall	.-776    	; 0x102 <Button_init>
 40a:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();
	
	uint16_t counter = 3215;
	
	uint8_t upCounterState=STOP;
 40c:	0f 2e       	mov	r0, r31
	
	
	
	sei();
	
	uint16_t counter = 3215;
 40e:	ff e8       	ldi	r31, 0x8F	; 143
 410:	ef 2e       	mov	r14, r31
 412:	fc e0       	ldi	r31, 0x0C	; 12
 414:	ff 2e       	mov	r15, r31
 416:	f0 2d       	mov	r31, r0
 418:	81 2c       	mov	r8, r1
{
	FND_init();
	TIM0_OVF_init();
	
	//uint32_t timeTick=0;
	uint32_t prevTime=0;
 41a:	91 2c       	mov	r9, r1
 41c:	54 01       	movw	r10, r8
 41e:	11 30       	cpi	r17, 0x01	; 1
	Button_init(&btnRunStop,&DDRA,&PINA,0);
	Button_init(&btnReset,&DDRA,&PINA,1);
	
	while (1)
	{
		switch(upCounterState) //이벤트 처리
 420:	a9 f0       	breq	.+42     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 422:	18 f0       	brcs	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	12 30       	cpi	r17, 0x02	; 2
 426:	d9 f0       	breq	.+54     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 428:	20 c0       	rjmp	.+64     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			case STOP :
			if(Button_GetState(&btnRunStop) == ACT_RELEASED)
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	78 de       	rcall	.-784    	; 0x120 <Button_GetState>
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	31 f0       	breq	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			{
				upCounterState = RUN;
			}
			else if(Button_GetState(&btnReset) == ACT_RELEASED)
 434:	ce 01       	movw	r24, r28
 436:	07 96       	adiw	r24, 0x07	; 7
 438:	73 de       	rcall	.-794    	; 0x120 <Button_GetState>
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	21 f4       	brne	.+8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		switch(upCounterState) //이벤트 처리
		{
			case STOP :
			if(Button_GetState(&btnRunStop) == ACT_RELEASED)
			{
				upCounterState = RUN;
 440:	11 e0       	ldi	r17, 0x01	; 1
 442:	01 c0       	rjmp	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
			else if(Button_GetState(&btnReset) == ACT_RELEASED)
			{
				upCounterState = RESET;
			}
			FND_setfndData(counter);
 444:	12 e0       	ldi	r17, 0x02	; 2
 446:	c7 01       	movw	r24, r14
 448:	8e df       	rcall	.-228    	; 0x366 <FND_setfndData>
			break;
 44a:	0f c0       	rjmp	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			
			case RUN :
			if(Button_GetState(&btnRunStop) == ACT_RELEASED)
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	67 de       	rcall	.-818    	; 0x120 <Button_GetState>
 452:	82 30       	cpi	r24, 0x02	; 2
			{
				upCounterState = STOP;
 454:	09 f4       	brne	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			}
			FND_setfndData(counter);
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	c7 01       	movw	r24, r14
 45a:	85 df       	rcall	.-246    	; 0x366 <FND_setfndData>
			break;
 45c:	06 c0       	rjmp	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			
			case RESET :
			if(Button_GetState(&btnRunStop) == ACT_RELEASED)
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	5e de       	rcall	.-836    	; 0x120 <Button_GetState>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			
			break;
		}
		
		
			switch(upCounterState) // 작동
 468:	10 e0       	ldi	r17, 0x00	; 0
 46a:	11 30       	cpi	r17, 0x01	; 1
 46c:	39 f0       	breq	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 46e:	18 f0       	brcs	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 470:	12 30       	cpi	r17, 0x02	; 2
 472:	e1 f0       	breq	.+56     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			{
				case STOP :		
				FND_setfndData(counter);
 474:	d4 cf       	rjmp	.-88     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 476:	c7 01       	movw	r24, r14
 478:	76 df       	rcall	.-276    	; 0x366 <FND_setfndData>
				break;
 47a:	d1 cf       	rjmp	.-94     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				
				
				case RUN :
				if(getTick() - prevTime > 1000)
 47c:	39 de       	rcall	.-910    	; 0xf0 <getTick>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	88 19       	sub	r24, r8
 484:	99 09       	sbc	r25, r9
 486:	aa 09       	sbc	r26, r10
 488:	bb 09       	sbc	r27, r11
 48a:	89 3e       	cpi	r24, 0xE9	; 233
 48c:	93 40       	sbci	r25, 0x03	; 3
 48e:	a1 05       	cpc	r26, r1
 490:	b1 05       	cpc	r27, r1
 492:	08 f4       	brcc	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
				{
					prevTime = getTick();
 494:	c4 cf       	rjmp	.-120    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 496:	2c de       	rcall	.-936    	; 0xf0 <getTick>
 498:	4b 01       	movw	r8, r22
					FND_setfndData(counter++);
 49a:	5c 01       	movw	r10, r24
 49c:	67 01       	movw	r12, r14
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	c8 1a       	sub	r12, r24
 4a2:	d8 0a       	sbc	r13, r24
 4a4:	c7 01       	movw	r24, r14
 4a6:	5f df       	rcall	.-322    	; 0x366 <FND_setfndData>
 4a8:	76 01       	movw	r14, r12
 4aa:	b9 cf       	rjmp	.-142    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				break;
				
				
				case RESET :
				counter = 0;
				FND_setfndData(counter);				
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	5a df       	rcall	.-332    	; 0x366 <FND_setfndData>
 4b2:	e1 2c       	mov	r14, r1
				}
				break;
				
				
				case RESET :
				counter = 0;
 4b4:	f1 2c       	mov	r15, r1
 4b6:	b3 cf       	rjmp	.-154    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

000004b8 <Gpio_initPin>:
				FND_setfndData(counter);				
				break;
 4b8:	fc 01       	movw	r30, r24

//Input-port
uint8_t Gpio_readPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 4ba:	41 30       	cpi	r20, 0x01	; 1
 4bc:	59 f4       	brne	.+22     	; 0x4d4 <Gpio_initPin+0x1c>
 4be:	20 81       	ld	r18, Z
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <Gpio_initPin+0x12>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <Gpio_initPin+0xe>
 4ce:	82 2b       	or	r24, r18
 4d0:	80 83       	st	Z, r24
 4d2:	08 95       	ret
 4d4:	80 81       	ld	r24, Z
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Gpio_initPin+0x28>
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <Gpio_initPin+0x24>
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	23 2b       	or	r18, r19
 4e8:	09 f0       	breq	.+2      	; 0x4ec <Gpio_initPin+0x34>
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	98 23       	and	r25, r24
 4ee:	90 83       	st	Z, r25
 4f0:	08 95       	ret

000004f2 <Gpio_readPin>:

//Input-pin
uint8_t Gpio_readPin(volatile uint8_t *PIN,uint8_t pinNum)
{
	return((*PIN&(1<<pinNum)) != 0);  // *PIN&(1<<pinNum)값은 0아니면1  // 0 != 0 // 거짓
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <Gpio_readPin+0xc>
 4fa:	95 95       	asr	r25
 4fc:	87 95       	ror	r24
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <Gpio_readPin+0x8>
	// != 을 쓴이유 : pinNum 제외한 버튼을 눌렀을 때 반응 안함

	
 502:	81 70       	andi	r24, 0x01	; 1
 504:	08 95       	ret

00000506 <TIM0_OVF_init>:


void TIM0_OVF_init() // 1ms 마다 interrupt 
{
	
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00));
 506:	83 b7       	in	r24, 0x33	; 51
 508:	85 60       	ori	r24, 0x05	; 5
 50a:	83 bf       	out	0x33, r24	; 51

	TIMSK |= ((1<<TOIE0));
 50c:	87 b7       	in	r24, 0x37	; 55
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	87 bf       	out	0x37, r24	; 55
	TCNT0=130;
 512:	82 e8       	ldi	r24, 0x82	; 130
 514:	82 bf       	out	0x32, r24	; 50
 516:	08 95       	ret

00000518 <__umulhisi3>:
 518:	a2 9f       	mul	r26, r18
 51a:	b0 01       	movw	r22, r0
 51c:	b3 9f       	mul	r27, r19
 51e:	c0 01       	movw	r24, r0
 520:	a3 9f       	mul	r26, r19
 522:	70 0d       	add	r23, r0
 524:	81 1d       	adc	r24, r1
 526:	11 24       	eor	r1, r1
 528:	91 1d       	adc	r25, r1
 52a:	b2 9f       	mul	r27, r18
 52c:	70 0d       	add	r23, r0
 52e:	81 1d       	adc	r24, r1
 530:	11 24       	eor	r1, r1
 532:	91 1d       	adc	r25, r1
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>

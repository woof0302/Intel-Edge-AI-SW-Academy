
5. FND_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a65  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000934  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000429  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c1       	rjmp	.+652    	; 0x2ce <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2e d1       	rcall	.+604    	; 0x320 <main>
  c4:	54 c1       	rjmp	.+680    	; 0x36e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_init>:

uint16_t fndData = 0;

void FND_init()
{
	FND_DIGIT_DDR = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	82 b9       	out	0x02, r24	; 2
	FND_NUM_DDR = 0xff;
  cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  d0:	08 95       	ret

000000d2 <FND_dispNum>:
	
}

void FND_dispNum(uint16_t fndNum) // fndNum 값을 fnd에 출력
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	2a 97       	sbiw	r28, 0x0a	; 10
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	ac 01       	movw	r20, r24
	uint8_t fndFont[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	de 01       	movw	r26, r28
  f0:	11 96       	adiw	r26, 0x01	; 1
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	8a 95       	dec	r24
  f8:	e1 f7       	brne	.-8      	; 0xf2 <FND_dispNum+0x20>
	
	static uint8_t findDigitState = 0;
	
	findDigitState = (findDigitState + 1) % 4;
  fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	83 70       	andi	r24, 0x03	; 3
 104:	90 78       	andi	r25, 0x80	; 128
 106:	99 23       	and	r25, r25
 108:	24 f4       	brge	.+8      	; 0x112 <FND_dispNum+0x40>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	8c 6f       	ori	r24, 0xFC	; 252
 10e:	9f 6f       	ori	r25, 0xFF	; 255
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	PORTE |= (1<<FND_DIGIT_4) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_1); 
 116:	83 b1       	in	r24, 0x03	; 3
 118:	80 6f       	ori	r24, 0xF0	; 240
 11a:	83 b9       	out	0x03, r24	; 3
	
	switch(findDigitState)
 11c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	09 f4       	brne	.+2      	; 0x126 <FND_dispNum+0x54>
 124:	3e c0       	rjmp	.+124    	; 0x1a2 <FND_dispNum+0xd0>
 126:	38 f0       	brcs	.+14     	; 0x136 <FND_dispNum+0x64>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	09 f4       	brne	.+2      	; 0x12e <FND_dispNum+0x5c>
 12c:	6a c0       	rjmp	.+212    	; 0x202 <FND_dispNum+0x130>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	09 f4       	brne	.+2      	; 0x134 <FND_dispNum+0x62>
 132:	95 c0       	rjmp	.+298    	; 0x25e <FND_dispNum+0x18c>
 134:	b8 c0       	rjmp	.+368    	; 0x2a6 <FND_dispNum+0x1d4>
	{
		case 0 :		
		FND_NUM_PORT = fndFont[fndNum/1000%10];	// fndNum의 천의 자리 추출
 136:	9a 01       	movw	r18, r20
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	a5 ec       	ldi	r26, 0xC5	; 197
 146:	b0 e2       	ldi	r27, 0x20	; 32
 148:	03 d1       	rcall	.+518    	; 0x350 <__umulhisi3>
 14a:	ac 01       	movw	r20, r24
 14c:	52 95       	swap	r21
 14e:	42 95       	swap	r20
 150:	4f 70       	andi	r20, 0x0F	; 15
 152:	45 27       	eor	r20, r21
 154:	5f 70       	andi	r21, 0x0F	; 15
 156:	45 27       	eor	r20, r21
 158:	9a 01       	movw	r18, r20
 15a:	ad ec       	ldi	r26, 0xCD	; 205
 15c:	bc ec       	ldi	r27, 0xCC	; 204
 15e:	f8 d0       	rcall	.+496    	; 0x350 <__umulhisi3>
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	9c 01       	movw	r18, r24
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	9a 01       	movw	r18, r20
 184:	28 1b       	sub	r18, r24
 186:	39 0b       	sbc	r19, r25
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	80 81       	ld	r24, Z
 196:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_1);  // 한 자리만 지정해서 출력
 19a:	83 b1       	in	r24, 0x03	; 3
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	83 b9       	out	0x03, r24	; 3
		break;
 1a0:	82 c0       	rjmp	.+260    	; 0x2a6 <FND_dispNum+0x1d4>
		
		case 1 :		
		FND_NUM_PORT=fndFont[fndNum/100%10];  // fndNum의 천의 자리 추출
 1a2:	9a 01       	movw	r18, r20
 1a4:	36 95       	lsr	r19
 1a6:	27 95       	ror	r18
 1a8:	36 95       	lsr	r19
 1aa:	27 95       	ror	r18
 1ac:	ab e7       	ldi	r26, 0x7B	; 123
 1ae:	b4 e1       	ldi	r27, 0x14	; 20
 1b0:	cf d0       	rcall	.+414    	; 0x350 <__umulhisi3>
 1b2:	ac 01       	movw	r20, r24
 1b4:	56 95       	lsr	r21
 1b6:	47 95       	ror	r20
 1b8:	9a 01       	movw	r18, r20
 1ba:	ad ec       	ldi	r26, 0xCD	; 205
 1bc:	bc ec       	ldi	r27, 0xCC	; 204
 1be:	c8 d0       	rcall	.+400    	; 0x350 <__umulhisi3>
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	82 0f       	add	r24, r18
 1e0:	93 1f       	adc	r25, r19
 1e2:	9a 01       	movw	r18, r20
 1e4:	28 1b       	sub	r18, r24
 1e6:	39 0b       	sbc	r19, r25
 1e8:	e1 e0       	ldi	r30, 0x01	; 1
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ec 0f       	add	r30, r28
 1ee:	fd 1f       	adc	r31, r29
 1f0:	e2 0f       	add	r30, r18
 1f2:	f3 1f       	adc	r31, r19
 1f4:	80 81       	ld	r24, Z
 1f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_2);
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	83 b9       	out	0x03, r24	; 3
		break;
		
		case 2 :
		FND_NUM_PORT=fndFont[fndNum/10%10];  // fndNum의 천의 자리 추출
 200:	52 c0       	rjmp	.+164    	; 0x2a6 <FND_dispNum+0x1d4>
 202:	9a 01       	movw	r18, r20
 204:	ad ec       	ldi	r26, 0xCD	; 205
 206:	bc ec       	ldi	r27, 0xCC	; 204
 208:	a3 d0       	rcall	.+326    	; 0x350 <__umulhisi3>
 20a:	ac 01       	movw	r20, r24
 20c:	56 95       	lsr	r21
 20e:	47 95       	ror	r20
 210:	56 95       	lsr	r21
 212:	47 95       	ror	r20
 214:	56 95       	lsr	r21
 216:	47 95       	ror	r20
 218:	9a 01       	movw	r18, r20
 21a:	9a d0       	rcall	.+308    	; 0x350 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	9c 01       	movw	r18, r24
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	9a 01       	movw	r18, r20
 240:	28 1b       	sub	r18, r24
 242:	39 0b       	sbc	r19, r25
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e2 0f       	add	r30, r18
 24e:	f3 1f       	adc	r31, r19
 250:	80 81       	ld	r24, Z
 252:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_3);
 256:	83 b1       	in	r24, 0x03	; 3
 258:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 25a:	83 b9       	out	0x03, r24	; 3
		
		case 3 :
		FND_NUM_PORT=fndFont[fndNum/1%10];  // fndNum의 천의 자리 추출
 25c:	24 c0       	rjmp	.+72     	; 0x2a6 <FND_dispNum+0x1d4>
 25e:	9a 01       	movw	r18, r20
 260:	ad ec       	ldi	r26, 0xCD	; 205
 262:	bc ec       	ldi	r27, 0xCC	; 204
 264:	75 d0       	rcall	.+234    	; 0x350 <__umulhisi3>
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	9c 01       	movw	r18, r24
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	9a 01       	movw	r18, r20
 28a:	28 1b       	sub	r18, r24
 28c:	39 0b       	sbc	r19, r25
 28e:	e1 e0       	ldi	r30, 0x01	; 1
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ec 0f       	add	r30, r28
 294:	fd 1f       	adc	r31, r29
 296:	e2 0f       	add	r30, r18
 298:	f3 1f       	adc	r31, r19
 29a:	80 81       	ld	r24, Z
 29c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<FND_DIGIT_4);
 2a0:	83 b1       	in	r24, 0x03	; 3
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 2a6:	2a 96       	adiw	r28, 0x0a	; 10
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <FND_setfndData>:



void FND_setfndData(uint16_t data)
{
	fndData = data;	
 2b8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndData+0x1>
 2bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndData>
 2c0:	08 95       	ret

000002c2 <FND_ISR_Process>:
}


void FND_ISR_Process()
{
	FND_dispNum(fndData);
 2c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndData>
 2c6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndData+0x1>
 2ca:	03 cf       	rjmp	.-506    	; 0xd2 <FND_dispNum>
 2cc:	08 95       	ret

000002ce <__vector_16>:
#include <avr/interrupt.h> // 인터럽트를 위한 헤더 추가
#include "driver/fnd.h"


ISR(TIMER0_OVF_vect)  // 매개변수 : TIMER0에 오버플로가 났을 때의 ISR
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	0b b6       	in	r0, 0x3b	; 59
 2da:	0f 92       	push	r0
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	FND_ISR_Process(); //ISR에서 동작하는 함수
 2f4:	e6 df       	rcall	.-52     	; 0x2c2 <FND_ISR_Process>
	TCNT0 = 130;
 2f6:	82 e8       	ldi	r24, 0x82	; 130
 2f8:	82 bf       	out	0x32, r24	; 50
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0b be       	out	0x3b, r0	; 59
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <main>:


int main(void)
{
	FND_init();
 320:	d3 de       	rcall	.-602    	; 0xc8 <FND_init>
	// Timer/Counter0 레지스터에 overflow가 발생할 때마다 Interrupt (주기적으로 하겠다)
	// prescaler 1/128
	
	//			 CS02		 CS01		 CS00      클럭 분주 설정
	//			  1		      1			  1
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00));
 322:	83 b7       	in	r24, 0x33	; 51
 324:	85 60       	ori	r24, 0x05	; 5
 326:	83 bf       	out	0x33, r24	; 51
	
	//TIMSK Timer Overflow Interrupt Enable 오버플로 인터럽트 가능하게 설정
	TIMSK |= ((1<<TOIE0));
 328:	87 b7       	in	r24, 0x37	; 55
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	87 bf       	out	0x37, r24	; 55
	
	// Global Interrupt Enable
	sei();
 32e:	78 94       	sei
	
	uint16_t counter = 3215;
 330:	8f e8       	ldi	r24, 0x8F	; 143
 332:	9c e0       	ldi	r25, 0x0C	; 12
	
	while (1)
	{
		FND_setfndData(counter++);	// counter를 계속 1씩 올린다
 334:	ec 01       	movw	r28, r24
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	bf df       	rcall	.-130    	; 0x2b8 <FND_setfndData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	83 ed       	ldi	r24, 0xD3	; 211
 33e:	90 e3       	ldi	r25, 0x30	; 48
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x20>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x2a>
 34a:	00 00       	nop
 34c:	ce 01       	movw	r24, r28
 34e:	f2 cf       	rjmp	.-28     	; 0x334 <main+0x14>

00000350 <__umulhisi3>:
 350:	a2 9f       	mul	r26, r18
 352:	b0 01       	movw	r22, r0
 354:	b3 9f       	mul	r27, r19
 356:	c0 01       	movw	r24, r0
 358:	a3 9f       	mul	r26, r19
 35a:	70 0d       	add	r23, r0
 35c:	81 1d       	adc	r24, r1
 35e:	11 24       	eor	r1, r1
 360:	91 1d       	adc	r25, r1
 362:	b2 9f       	mul	r27, r18
 364:	70 0d       	add	r23, r0
 366:	81 1d       	adc	r24, r1
 368:	11 24       	eor	r1, r1
 36a:	91 1d       	adc	r25, r1
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
